{{- if .Capabilities.APIVersions.Has "apps/v1" }}
apiVersion: apps/v1
{{- else }}
apiVersion: apps/v1beta2
{{- end }}
kind: Deployment
metadata:
  name: kafka-connect
  namespace: {{ .Values.global.namespace }}
  labels:
    app: kafka-connect
    release: {{ .Release.Name }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: kafka-connect
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: kafka-connect
        release: {{ .Release.Name }}
    spec:
      containers:
        - name: kafka-connect-worker
          image: "{{ .Values.global.containerRegistry}}/{{ .Values.image }}:{{ .Values.imageTag }}"
          imagePullPolicy: "{{ .Values.imagePullPolicy }}"
          ports:
            - name: kafka-connect
              containerPort: {{ .Values.servicePort }}
              protocol: TCP
          resources:
{{ toYaml .Values.resources | indent 12 }}
          env:
          - name: KARAPACE_ADVERTISED_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: KARAPACE_BOOTSTRAP_URI
            value: {{ .Values.kafka.bootstrapServers }}
      initContainers:
      - name: wait
        image: busybox
        command: ["/bin/sh", "/opt/provisioning/wait-for-minimum-kafkas.sh"]
        env:
        - name: KAFKA_BROKERS
          valueFrom:
            configMapKeyRef:
              name: kafka-config
              key: KAFKA_BROKERS
        - name: REPLICAS
          valueFrom:
            configMapKeyRef:
              name: kafka-config
              key: KAFKA_MINIMUM_REPLICAS
        volumeMounts:
        - name: provisioning-scripts
          mountPath: /opt/provisioning
      volumes:
        - name: provisioning-scripts
          configMap:
            name: provisioning-scripts
